<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
          http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd   http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--bean id="shiroPropertyPlaceholderConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="order" value="1"></property>
        <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE"/>
        <property name="ignoreResourceNotFound" value="true"/>
        <property name="ignoreUnresolvablePlaceholders" value="true" />
        <property name="locations">
            <list>
                <value>/WEB-INF/config/shiro.properties</value>
            </list>
        </property>
    </bean-->

    <!--采用Redis做缓存-->
    <!--alias name="cacheManager" alias="shiroSpringCacheManager"/-->

    <!--采用encache做缓存-->
    <bean id="shiroEhcacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
        <property name="configLocation" value="classpath:context/ehcache/ehcache-shiro.xml"/>
    </bean>

    <bean id="shiroSpringCacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
        <property name="cacheManager" ref="shiroEhcacheManager"/>
    </bean>
    
    <!--包裹Spring的CacheManager为Shiro的CacheManager-->
    <bean id="shiroCacheManager" class="com.yanyan.core.shiro.SpringCacheManagerWrapper">
        <property name="cacheManager" ref="shiroSpringCacheManager"/>
    </bean>

    <bean id="credentialsMatcher" class="com.yanyan.core.shiro.RetryLimitHashedCredentialsMatcher">
        <property name="delegate">
            <bean class="com.yanyan.core.shiro.CustomCredentialsMatcher">
                <constructor-arg ref="shiroService"/>
            </bean>
        </property>
        <property name="cacheManager" ref="shiroCacheManager"/>
        <property name="cacheName" value="${shiro.password.retry.cache.name}"/>
        <!--重试次数-->
        <property name="retryLimit" value="5"/>
        <!--锁定时长-->
        <property name="lockTime" value="600"/>
    </bean>

    <!-- realm -->
    <bean id="userRealm" class="com.yanyan.core.shiro.UserRealm">
        <constructor-arg index="0" ref="shiroCacheManager"/>
        <constructor-arg index="1" ref="credentialsMatcher"/>
        <property name="shiroService" ref="shiroService"/>
        <property name="authorizationCacheName" value="${shiro.authorization.cache.name}"/>
        <property name="authenticationCacheName" value="${shiro.authentication.cache.name}"/>
        <property name="authenticationCachingEnabled" value="true"/>
        <property name="authorizationCachingEnabled" value="true"/>
    </bean>

    <!---cookie-->
    <!-- uid(session id) 生成策略 -->
    <bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="${shiro.uid.cookie.name}"/>
        <property name="domain" value="${shiro.uid.cookie.domain}"/>
        <property name="path" value="${shiro.uid.cookie.path}"/>
        <property name="httpOnly" value="${shiro.uid.cookie.httpOnly}"/>
        <property name="maxAge" value="${shiro.uid.cookie.maxAge}"/>
    </bean>
    <bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="${shiro.uid.rememberMe.cookie.name}"/>
        <property name="domain" value="${shiro.uid.cookie.domain}"/>
        <property name="path" value="${shiro.uid.cookie.path}"/>
        <property name="httpOnly" value="${shiro.uid.cookie.httpOnly}"/>
        <property name="maxAge" value="${shiro.uid.rememeberMe.cookie.maxAge}"/>
    </bean>

    <!--dao -->
    <!-- 会话保持的DAO -->
    <bean id="sessionDAO" class="com.yanyan.core.shiro.UserSessionDAO">
        <property name="shiroService" ref="shiroService"/>
        <property name="cacheManager" ref="shiroCacheManager"/>
        <property name="sessionIdGenerator" ref="sessionIdGenerator"/>
        <property name="activeSessionsCacheName" value="${shiro.active.session.cache.name}"/>
    </bean>

    <!-- manager -->
    <!-- Remembered vs Authenticated http://www.ituring.com.cn/article/287 -->
    <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
        <!-- rememberme cookie加密的密钥 建议每个项目都不一样 默认AES算法 密钥长度（128 256 512 位）-->
        <property name="cipherKey"
                  value="#{T(org.apache.shiro.codec.Base64).decode('${shiro.uid.rememeberMe.cookie.base64.cipherKey}')}"/>
        <property name="cookie" ref="rememberMeCookie"/>
    </bean>

    <bean id="userSessionFactory" class="com.yanyan.core.shiro.UserSessionFactory"/>
    <bean id="userSessionListener" class="com.yanyan.core.shiro.ShiroSessionListener"/>

    <!-- 会话管理器 -->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <property name="sessionFactory" ref="userSessionFactory"/>
        <property name="sessionListeners">
            <list>
                <ref bean="userSessionListener"/>
            </list>
        </property>
        <property name="globalSessionTimeout" value="${shiro.session.globalSessionTimeout}"/>
        <property name="sessionDAO" ref="sessionDAO"/>
        <!--不删除，由验证过滤器验证的时候删除-->
        <property name="deleteInvalidSessions" value="true"/>
        <property name="sessionValidationInterval" value="${shiro.session.globalSessionTimeout}"/>
        <property name="sessionValidationSchedulerEnabled" value="true"/>

        <property name="cacheManager" ref="shiroCacheManager"/>
        <property name="sessionIdCookieEnabled" value="true"/>
        <property name="sessionIdCookie" ref="sessionIdCookie"/>
    </bean>

    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!-- Single realm app.  If you have multiple realms, use the 'realms' property instead. -->
        <property name="realm" ref="userRealm"/>
        <property name="subjectFactory">
            <!--无状态时不创建会话，有状态是创建会话-->
            <bean class="com.yanyan.core.shiro.CustomSubjectFactory"/>
        </property>
        <!--默认是容器管理session-->
        <property name="sessionManager" ref="sessionManager"/>
        <property name="rememberMeManager" ref="rememberMeManager"/>
    </bean>

    <!--限制用户会话个数-->
    <bean id="limitSessionFilter" class="com.yanyan.core.shiro.LimitedSessionFilter">
        <property name="cacheName" value="${shiro.limited.session.cache.name}"/>
        <property name="cacheManager" ref="shiroCacheManager"/>
        <property name="sessionManager" ref="sessionManager"/>
        <!--最大会话个数-->
        <property name="maxSession" value="${shiro.max.session}"/>
        <!--是否将最后登录的用户踢出，默认否-->
        <property name="kickOutLast" value="${shiro.kickout.last}"/>
    </bean>
    <!-- 验证会话是否是否有效的filter，如强制退出、踢出、超时 -->
    <bean id="inspectSessionFilter" class="com.yanyan.core.shiro.InspectSessionFilter">
        <property name="logOutUrl" value="shiro.user.logout.url"/>
        <property name="timeOutUrl" value="${shiro.user.timeout.url}"/>
        <property name="forceOutUrl" value="${shiro.user.forceout.url}"/>
        <property name="kickOutUrl" value="${shiro.user.kickout.url}"/>
        <property name="sessionDAO" ref="sessionDAO"/>
    </bean>

    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <!-- override these for application-specific URLs if you like, if is ajax request, url must be /login_status-->
        <property name="loginUrl" value="${shiro.login.url}"/>
        <property name="unauthorizedUrl" value="${shiro.unauthorized.url}"/>
        <!-- The 'filters' property is not necessary since any declared javax.servlet.Filter bean  -->
        <!-- defined will be automatically acquired and available via its beanName in chain        -->
        <!-- definitions, but you can perform instance overrides or name aliases here if you like: -->
        <property name="filters">
            <util:map>
                <entry key="authcful">
                    <bean class="com.yanyan.core.shiro.StatefulAuthenticationFilter"/>
                </entry>
                <entry key="authcless">
                    <bean class="com.yanyan.core.shiro.StatelessAuthenticationFilter">
                        <constructor-arg ref="shiroService"/>
                    </bean>
                </entry>
                <entry key="limit" value-ref="limitSessionFilter"/>
                <entry key="inspect" value-ref="inspectSessionFilter"/>
            </util:map>
        </property>
        <property name="filterChainDefinitions">
            <value>
                /favicon.ico = anon
                /assets/** = anon
                /errors/** = anon
                /captcha* = anon
                /login* = anon
                /logout* = anon
                /api/** = anon
                /app/login* = anon
                /app/** = authcless,perms,roles
                /** = authcful,limit,inspect,perms,roles
            </value>
        </property>
    </bean>

    <!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!-- aop and other-->
    <!-- For simplest integration, so that all SecurityUtils.* methods work in all cases, -->
    <!-- make the securityManager bean a static singleton.  DO NOT do this in web         -->
    <!-- applications - see the 'Web Applications' section below instead.                 -->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
        <property name="arguments" ref="securityManager"/>
    </bean>

    <!-- 开启Shiro的注解(如@RequiresRoles,@RequiresPermissions),需借助SpringAOP扫描使用Shiro注解的类,并在必要时进行安全逻辑验证 -->
    <!-- 配置以下两个bean即可实现此功能 -->
    <!-- Enable Shiro Annotations for Spring-configured beans. Only run after the lifecycleBeanProcessor has run -->
    <!-- 由于本例中并未使用Shiro注解,故注释掉这两个bean(个人觉得将权限通过注解的方式硬编码在程序中,查看起来不是很方便,没必要使用) -->
    <!--
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>
      <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
      </bean>
    -->

    <aop:config proxy-target-class="true"/>

    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

</beans>